# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

project = "Testy.xcodeproj"

platform :ios do
  lane :build_for_testing do
    scan(
      project: project,
      scheme: 'Testy',
      devices: ['iPhone 14'],
      build_for_testing: true,
      derived_data_path: ENV['BITRISE_DEPLOY_DIR']
    )
  end

  lane :tests_without_building do |options|
    test_language = options[:test_language]
    test_region = options[:test_region]

    xcargs = nil
    if !test_language.to_s.empty? && !test_region.to_s.empty?
      xcargs = "-testLanguage #{test_language} -testRegion #{test_region}"
    end

    scan(
      project: project,
      scheme: 'Testy',
      reset_simulator: true,
      devices: ['iPhone 14'],
      disable_concurrent_testing: true,
      code_coverage: false,
      output_types: 'junit',
      output_directory: ENV['BITRISE_DEPLOY_DIR'],
      output_files: 'report.xml',
      xcargs: xcargs,
      skip_build: true,
      result_bundle: false,
      should_zip_build_products: false,
      suppress_xcode_output: false,
      test_without_building: true,
      derived_data_path: ENV['BITRISE_DEPLOY_DIR']
    )
  end

  lane :tests do |options|
    test_language = options[:test_language]
    test_region = options[:test_region]

    xcargs = nil
    if !test_language.to_s.empty? && !test_region.to_s.empty?
      xcargs = "-testLanguage #{test_language} -testRegion #{test_region}"
    end

    scan(
      project: project,
      scheme: 'Testy',
      reset_simulator: true,
      devices: ['iPhone 14'],
      disable_concurrent_testing: true,
      code_coverage: false,
      output_types: 'junit',
      output_directory: ENV['BITRISE_DEPLOY_DIR'],
      output_files: 'report.xml',
      xcargs: xcargs,
      skip_build: true,
      result_bundle: false,
      should_zip_build_products: false,
      suppress_xcode_output: false,
      output_style: 'raw'
    )
  end

  lane :create_release do
    ensure_git_clean

    ensure_git_branch(
      branch: 'main'
    )

    enter_version_prompt

    version_number = version_number(
      project: project,
      target: 'Testy'
    )

    build_number = increment_project_build_number(
      project: project,
    )

    puts "The app version for target 'Testy' is #{version_number}"
    puts "The build number for target 'Testy' is #{build_number}"

    branch_name = "release/v" + version_number # release/v1.2.3
    release_candidate_tag = "RC/v#{version_number}-b#{build_number}" # RC/v1.2.3-b1

    if remote_exists?(branch_name)
      # Deletes the release branch remote.
      sh("git push origin -d #{branch_name}")
    end

    if local_exists?(branch_name)
      # Deletes the release branch locally.
      sh("git branch -D #{branch_name}")
    end

    # Create release/{version_number} branch
    sh("git checkout -b #{branch_name}")

    git_commit(
      path: [
        "Testy/Info.plist",
        "Testy.xcodeproj/project.pbxproj"
      ],
      message: <<~GIT_COMMIT
        Bumping the version to #{version_number} for Testy.
      GIT_COMMIT
    )

    if git_tag_exists(tag: "#{release_candidate_tag}", remote: true)
      # remove remote tag.
      remove_release_candidate_tag(
        version_number: version_number
      )
    end

    if git_tag_exists(tag: "#{release_candidate_tag}")
      # remove local tag
      sh("git tag -d #{release_candidate_tag}")
    end

    add_git_tag(
      tag: "#{release_candidate_tag}"
    )

    push_to_git_remote()
  end

  lane :create_release_patch do    
    version_number = version_number(
      project: project,
      target: 'Testy'
    )

    build_number = increment_project_build_number(
      project: project,
    )

    branch_name = "release/v" + version_number # release/v1.2.3
    release_candidate_tag = "RC/v#{version_number}-b#{build_number}" # RC/v1.2.3-b1

    ensure_git_branch(
      branch: "#{branch_name}"
    )

    git_commit(
      path: [
        "Testy/Info.plist",
        "Testy.xcodeproj/project.pbxproj"
      ],
      message: <<~GIT_COMMIT
        Bumping the build number to #{build_number} for Testy.
      GIT_COMMIT
    )

    ensure_git_clean

    if git_tag_exists(tag: "#{release_candidate_tag}", remote: true)
      # remove remote tag.
      remove_rc_tag(
        version_number: version_number,
        build_number: build_number
      )
    end

    if git_tag_exists(tag: "#{release_candidate_tag}")
      # remove local tag
      sh("git tag -d #{release_candidate_tag}")
    end

    add_git_tag(
      tag: "#{release_candidate_tag}"
    )

    push_to_git_remote()
  end

  lane :submit_app_for_review do |options|
    version_number = version_number(
      project: project,
      target: 'Testy'
    )

    build_number = build_number(
      project: project
    )

    tag_release(
      version_number: version_number,
      build_number: build_number
    )

    branch_name = "release/v" + version_number # release/v1.2.3
    release_candidate_tag = "RC/v#{version_number}-b#{build_number}" # RC/v1.2.3-b1

    if local_exists?(branch_name)
      # Make sure we are not on the release branch
      if git_branch == branch_name
        sh("git checkout main")
      end

      # Delete the local release branch
      sh("git branch -D #{branch_name}")
    end

    if git_tag_exists(tag: "#{release_candidate_tag}")
      # Delete the local release candidate tag
      sh("git tag -d #{release_candidate_tag}")
    end
    
    remove_release_candidate_tag(
      version_number: version_number
    )
  end

  lane :create_github_release do |options|
    version_number = version_number(
      project: project,
      target: 'Testy'
    )

    changelog = options[:changelog]

    set_github_release(
      repository_name: 'mrksbrgh/Testy',
      name: version_number,
      api_token: ENV['GITHUB_API_TOKEN'],
      tag_name: last_git_tag(),
      description: (File.read("#{changelog}") rescue "No changelog provided")
    )
  end

  desc 'Enter the version to be released'
  lane :enter_version_prompt do
    version = prompt(text: 'Enter the version you wanna release in the format of major.minor.patch(1.2.3):')
    # Sets the version of Hemnet app.
    increment_version_number(
      version_number: "#{version}" # Set a specific version number
    )
  end

  desc 'Removes the release candidate tag for the specifed version including all builds'
  lane :remove_release_candidate_tag do |options|
    version_number = options[:version_number]

    tag = "RC/v#{version_number}*"
    sh("git push --delete origin $(git tag --list '#{tag}')")
  end

  desc 'Finds the release candidate tag for version and build and tags it with release/vX.X.X-bXXX'
  lane :tag_release do |options|
    build_number = options[:build_number]
    version_number = options[:version_number]

    tag = "RC/v#{version_number}-b#{build_number}"
    commit_hash = sh("git rev-list -1 " + tag)

    add_git_tag(
      commit: commit_hash,
      tag: "release/v#{version_number}-b#{build_number}"
    )

    push_git_tags(
      tag: "release/v#{version_number}-b#{build_number}"
    )
  end

  desc 'Creates a git tag from the latest commit and push to remote'
  lane :create_git_tag do
    version_number = version_number(
      project: project,
      target: 'Testy'
    )

    build_number = increment_project_build_number(
      project: project
    )

    release_candidate_tag = "RC/v#{version_number}-b#{build_number}" # RC/v1.2.3-b1

    add_git_tag(
      tag: "#{release_candidate_tag}"
    )

    push_git_tags(
      tag: "#{release_candidate_tag}"
    )
  end

  # Functions

  def ensure_git_clean
    ensure_git_status_clean(
      show_uncommitted_changes: true,
      show_diff: true
    )
  end

  def build_number(project:)
    get_build_number(
      xcodeproj: project
    )
  end

  def version_number(project:, target:)
    get_version_number(
      xcodeproj: project,
      target: target
    )
  end

  def increment_project_build_number(project:)
    current_build_number = build_number(
      project: project
    ).to_i

    next_build_number = current_build_number + 1

    increment_build_number(
      xcodeproj: project,
      build_number: next_build_number
    )
  end

  def remote_exists?(branch)
    result = sh("git ls-remote --heads git@github.com:mrksbrgh/testy.git #{branch}")

    !result.strip.empty?
  end

  def local_exists?(branch)
    # runs the shell command and stores it in $? exitstatus is 1 if not found.
    `git show-ref --heads #{branch}`

    $?.exitstatus.zero?
  end
end
